{"version":3,"sources":["logo.svg","App.js","components/Scecond.jsx","Hello.js","serviceWorker.js","index.js"],"names":["module","exports","App","Scecond","props","index","maps","this","setState","console","log","pth","onClick","btn","bind","map","items","key","names","React","Component","Word","className","color","name","Time","color1","data","toLocaleTimeString","Modes","item","Inputs","state","name1","name2","selects","event","target","value","onChange","onchanges","selectChange","Hello","helloBtn","superNmae","Date","Boolean","window","location","hostname","match","setInterval","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee88d89c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"pname\">这是一个p标签</p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\"\n\n\n// 组件名首字母大写\n//组件中必须导入react\n/**\n * constructor 如果你实现了构造器，new创建对象的时候就会执行一次\n * class中只要是继承了constructor函数中第一句必须要调用super()方法\n * jsx中的模型数据就是写在constructor函数中\n * \n * 事件处理和this问题\n * react this指向通过箭头函数来绑定 或者bind来修改指向\n * this只能获取实力话的对象\n * 修改模型数据需要使用setstate()来修改参数\n * \n * react 父组件传值给子组件只能用不能修改\n * react 子组件传值给父组件 通过父组件传一个callback回调函数给子组件 子组件调用父组件传过来的回调函数将参数通过调用函数的形参给父组件\n */\n\n\n//子组件\nclass Scecond extends React.Component {\n    static names = \"张三\"\n    constructor(props) {\n        super(props)\n\n        this.index = null\n        this.maps = [\"张三\", \"李四\", \"王五\"]\n    }\n\n    btn() {\n        this.index = this.props.index\n        //修改该组件的值\n        this.setState({\n            index: this.index++\n        }, () => {\n            console.log(this.index)\n            this.props.pth(this.index)\n        })\n        //  this.props.pth()\n\n    }\n\n    render() {\n        if (this.index === 2) {\n            return (\n                <div>\n                    <button onClick={this.btn.bind(this)}>点我触发事件</button>\n                    {this.maps.map((items) =>\n                        <div key={items}>{items}</div>\n                    )\n                    }\n                </div>\n\n            )\n        } else {\n            return (\n                <div>\n                    <button onClick={this.btn.bind(this)}>点我触发事件啦啦啦</button>\n                    {/* react静态属性 通过类名.来调用 */}\n                    <div>{Scecond.names}</div>\n                    {/* react实力化属性  通过this.来调用  接收父组件传过来的index */}\n                    <div>{this.props.index}</div>\n                </div>\n            )\n        }\n\n    }\n}\n\n\nexport default Scecond","import React from 'react';\nimport logo from './logo.svg';\nimport Scecond from \"./components/Scecond\"\nimport './App.css';\nimport { CombineLatestOperator } from 'rxjs/internal/observable/combineLatest';\nimport { selector } from 'postcss-selector-parser';\n\n//函数式组件\n// function Hello() {\n//     return (\n//       <div className=\"pname\">hello word</div>\n//     )\n// }\n//类组件\n// class Hello extends React.Component{\n//     render(){\n//         return <div className=\"pname\">hello word</div>\n//     }\n// }\n\n\n\n//组合组件\nfunction Word(props) {\n    return <div className={props.color}>hello,{props.name}</div>\n}\n\n\n\n//函数式时间计数\n// function Time(props) {\n//     return (\n//         <div className=\"time\">现在是:{props.data.toLocaleTimeString()}</div>\n//     )\n// }\n\n//类式时间计数\nclass Time extends React.Component {\n    static color = \"黑色\"\n    constructor() {\n        super()\n        this.color1 = \"白色\"\n    }\n    render() {\n        return (\n            <div className=\"time\">\n                现在是:{this.props.data.toLocaleTimeString()}\n                <p>我是{this.color1}</p>\n                <p>我是{Time.color}</p>\n            </div>\n        )\n    }\n    componentDidMount() {\n        console.log(\"dom加载完啦\")\n    }\n    componentWillUnmount() {\n        console.log(\"要离开咯\")\n    }\n}\n\n//使用map渲染多个组件   列表渲染组件\nclass Modes extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        const list = [1, 2, 3, 4, 5]\n        const divList = list.map((item) => <div key={item}>{item}</div>)\n        return (\n            divList\n        )\n    }\n}\n\n//受控组件\nclass Inputs extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            name1: \"王五\",\n            name2: \"赵六\",\n             selects :\"lime\"\n        }\n    }\n    onchanges(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        }, () => {\n            // console.log(this.state.name)\n        })\n    }\n    selectChange(event){\n        this.setState({\n            selects: event.target.value\n        }, () => {\n            console.log(this.state.selects)\n        })\n    }\n    render() {\n        return (\n          <>\n           <input name=\"name1\" value={this.state.name1} onChange={this.onchanges.bind(this)} />\n            <input name=\"name2\" value={this.state.name2} onChange={this.onchanges.bind(this)} />\n            <select value={this.state.selects} onChange={this.selectChange.bind(this)}> \n            <option value=\"grapefruit\">Grapefruit</option>\n            <option value=\"lime\">Lime</option>\n            <option value=\"coconut\">Coconut</option>\n            <option value=\"mango\">Mango</option>\n            </select>\n          </>\n        )\n    }\n}\n\n//   父组件\nclass Hello extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            index: 1\n        };\n        this.superNmae = \"张三\"\n    }\n\n    //生命周期钩子\n\n\n\n\n    helloBtn = (data) => {\n        //子组件传过来的值\n        console.log(data) //这里是  2\n        this.setState({\n            index: data\n        }, () => {\n            //回调函数\n            console.log(\"传值成功我是回调函数\", this.state.index)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Word color=\"color1\" name=\"word1\" />\n                <Word color=\"color2\" name=\"word2\" />\n                <Word color=\"color3\" name=\"word3\" />\n                <Time data={new Date()} />\n                <Scecond index={this.state.index} pth={this.helloBtn} />\n                <div>我是子组件传过来的值{this.state.index}</div>\n                {/* 列表组件 */}\n                <Modes />\n                {/* 受控组件 */}\n                <Inputs />\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\nexport default Hello;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Hello from \"./Hello\"\nimport * as serviceWorker from './serviceWorker';\nfunction time (){\n\nReactDOM.render(<Hello />, document.getElementById('root'));\n}\n\nsetInterval(time,1000)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}